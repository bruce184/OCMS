{"ast":null,"code":"// CourseModel - Quản lý logic nghiệp vụ cho Course\n// Sync với database schema OCMS1\nexport class CourseModel {\n  // Lấy tất cả courses\n  static getAllCourses() {\n    return this.courses;\n  }\n\n  // Lấy course theo code\n  static getCourseByCode(courseCode) {\n    return this.courses.find(course => course.courseCode === courseCode);\n  }\n\n  // Lấy courses theo type\n  static getCoursesByType(courseType) {\n    return this.courses.filter(course => course.courseType === courseType);\n  }\n\n  // Thêm course mới\n  static addCourse(course) {\n    this.courses.push(course);\n    return course;\n  }\n\n  // Cập nhật course\n  static updateCourse(courseCode, updates) {\n    const index = this.courses.findIndex(course => course.courseCode === courseCode);\n    if (index !== -1) {\n      this.courses[index] = {\n        ...this.courses[index],\n        ...updates\n      };\n      return this.courses[index];\n    }\n    return null;\n  }\n\n  // Xóa course\n  static deleteCourse(courseCode) {\n    const index = this.courses.findIndex(course => course.courseCode === courseCode);\n    if (index !== -1) {\n      this.courses.splice(index, 1);\n      return true;\n    }\n    return false;\n  }\n\n  // Lấy tất cả classes\n  static getAllClasses() {\n    return this.classes;\n  }\n\n  // Lấy classes theo course\n  static getClassesByCourse(courseCode) {\n    return this.classes.filter(cls => cls.courseCode === courseCode);\n  }\n\n  // Lấy classes theo semester\n  static getClassesBySemester(semesterCode, year) {\n    return this.classes.filter(cls => cls.semesterCode === semesterCode && cls.year === year);\n  }\n\n  // Thêm class mới\n  static addClass(cls) {\n    this.classes.push(cls);\n    return cls;\n  }\n\n  // Kiểm tra xem class có còn chỗ không\n  static isClassAvailable(classId) {\n    const cls = this.classes.find(c => c.classId === classId);\n    if (!cls) return false;\n    return cls.currentEnrollment < cls.capacity;\n  }\n\n  // Đăng ký học viên vào class\n  static enrollStudent(classId) {\n    const cls = this.classes.find(c => c.classId === classId);\n    if (!cls || !this.isClassAvailable(classId)) return false;\n    cls.currentEnrollment += 1;\n    return true;\n  }\n\n  // Hủy đăng ký học viên\n  static unenrollStudent(classId) {\n    const cls = this.classes.find(c => c.classId === classId);\n    if (!cls || cls.currentEnrollment <= 0) return false;\n    cls.currentEnrollment -= 1;\n    return true;\n  }\n\n  // Lấy schedule cho class\n  static getScheduleForClass(classId) {\n    return this.schedules.find(schedule => schedule.classId === classId);\n  }\n\n  // Lấy tất cả schedules\n  static getAllSchedules() {\n    return this.schedules;\n  }\n\n  // Lấy semesters\n  static getAllSemesters() {\n    return this.semesters;\n  }\n\n  // Lấy thông tin chi tiết course với classes\n  static getCourseDetails(courseCode) {\n    const course = this.getCourseByCode(courseCode);\n    const classes = this.getClassesByCourse(courseCode);\n    return {\n      course,\n      classes\n    };\n  }\n}\nCourseModel.courses = [{\n  courseCode: 'CS101',\n  courseName: 'Introduction to Computer Science',\n  credit: 3,\n  courseType: 'L'\n}, {\n  courseCode: 'CS102',\n  courseName: 'Programming Fundamentals',\n  credit: 4,\n  courseType: 'P'\n}, {\n  courseCode: 'MATH101',\n  courseName: 'Calculus I',\n  credit: 4,\n  courseType: 'L'\n}, {\n  courseCode: 'ENG101',\n  courseName: 'English Composition',\n  credit: 3,\n  courseType: 'L'\n}, {\n  courseCode: 'PHYS101',\n  courseName: 'Physics I',\n  credit: 4,\n  courseType: 'L'\n}];\nCourseModel.semesters = [{\n  semesterCode: 'Fall',\n  year: 2024\n}, {\n  semesterCode: 'Spring',\n  year: 2024\n}];\nCourseModel.classes = [{\n  classId: 'CS101-F24-01',\n  courseCode: 'CS101',\n  courseName: 'Introduction to Computer Science',\n  semesterCode: 'Fall',\n  year: 2024,\n  capacity: 30,\n  currentEnrollment: 3\n}, {\n  classId: 'CS102-F24-01',\n  courseCode: 'CS102',\n  courseName: 'Programming Fundamentals',\n  semesterCode: 'Fall',\n  year: 2024,\n  capacity: 25,\n  currentEnrollment: 2\n}, {\n  classId: 'MATH101-F24-01',\n  courseCode: 'MATH101',\n  courseName: 'Calculus I',\n  semesterCode: 'Fall',\n  year: 2024,\n  capacity: 35,\n  currentEnrollment: 2\n}];\nCourseModel.schedules = [{\n  scheduleId: 'SCH001',\n  classId: 'CS101-F24-01',\n  room: 'Room 101',\n  timeSlot: 'Monday 9:00 AM - 10:30 AM'\n}, {\n  scheduleId: 'SCH002',\n  classId: 'CS102-F24-01',\n  room: 'Lab 201',\n  timeSlot: 'Tuesday 2:00 PM - 4:00 PM'\n}, {\n  scheduleId: 'SCH003',\n  classId: 'MATH101-F24-01',\n  room: 'Room 102',\n  timeSlot: 'Wednesday 10:00 AM - 11:30 AM'\n}];","map":{"version":3,"names":["CourseModel","getAllCourses","courses","getCourseByCode","courseCode","find","course","getCoursesByType","courseType","filter","addCourse","push","updateCourse","updates","index","findIndex","deleteCourse","splice","getAllClasses","classes","getClassesByCourse","cls","getClassesBySemester","semesterCode","year","addClass","isClassAvailable","classId","c","currentEnrollment","capacity","enrollStudent","unenrollStudent","getScheduleForClass","schedules","schedule","getAllSchedules","getAllSemesters","semesters","getCourseDetails","courseName","credit","scheduleId","room","timeSlot"],"sources":["D:/1. UMT/01. SUBJECTS/2. INTRO TO S.E/PROJECT/OCMS/src/models/CourseModel.ts"],"sourcesContent":["import { Course, Class, Semester, Schedule } from './index';\r\n\r\n// CourseModel - Quản lý logic nghiệp vụ cho Course\r\n// Sync với database schema OCMS1\r\nexport class CourseModel {\r\n  private static courses: Course[] = [\r\n    {\r\n      courseCode: 'CS101',\r\n      courseName: 'Introduction to Computer Science',\r\n      credit: 3,\r\n      courseType: 'L'\r\n    },\r\n    {\r\n      courseCode: 'CS102',\r\n      courseName: 'Programming Fundamentals',\r\n      credit: 4,\r\n      courseType: 'P'\r\n    },\r\n    {\r\n      courseCode: 'MATH101',\r\n      courseName: 'Calculus I',\r\n      credit: 4,\r\n      courseType: 'L'\r\n    },\r\n    {\r\n      courseCode: 'ENG101',\r\n      courseName: 'English Composition',\r\n      credit: 3,\r\n      courseType: 'L'\r\n    },\r\n    {\r\n      courseCode: 'PHYS101',\r\n      courseName: 'Physics I',\r\n      credit: 4,\r\n      courseType: 'L'\r\n    }\r\n  ];\r\n\r\n  private static semesters: Semester[] = [\r\n    { semesterCode: 'Fall', year: 2024 },\r\n    { semesterCode: 'Spring', year: 2024 }\r\n  ];\r\n\r\n  private static classes: Class[] = [\r\n    {\r\n      classId: 'CS101-F24-01',\r\n      courseCode: 'CS101',\r\n      courseName: 'Introduction to Computer Science',\r\n      semesterCode: 'Fall',\r\n      year: 2024,\r\n      capacity: 30,\r\n      currentEnrollment: 3\r\n    },\r\n    {\r\n      classId: 'CS102-F24-01',\r\n      courseCode: 'CS102',\r\n      courseName: 'Programming Fundamentals',\r\n      semesterCode: 'Fall',\r\n      year: 2024,\r\n      capacity: 25,\r\n      currentEnrollment: 2\r\n    },\r\n    {\r\n      classId: 'MATH101-F24-01',\r\n      courseCode: 'MATH101',\r\n      courseName: 'Calculus I',\r\n      semesterCode: 'Fall',\r\n      year: 2024,\r\n      capacity: 35,\r\n      currentEnrollment: 2\r\n    }\r\n  ];\r\n\r\n  private static schedules: Schedule[] = [\r\n    {\r\n      scheduleId: 'SCH001',\r\n      classId: 'CS101-F24-01',\r\n      room: 'Room 101',\r\n      timeSlot: 'Monday 9:00 AM - 10:30 AM'\r\n    },\r\n    {\r\n      scheduleId: 'SCH002',\r\n      classId: 'CS102-F24-01',\r\n      room: 'Lab 201',\r\n      timeSlot: 'Tuesday 2:00 PM - 4:00 PM'\r\n    },\r\n    {\r\n      scheduleId: 'SCH003',\r\n      classId: 'MATH101-F24-01',\r\n      room: 'Room 102',\r\n      timeSlot: 'Wednesday 10:00 AM - 11:30 AM'\r\n    }\r\n  ];\r\n\r\n  // Lấy tất cả courses\r\n  static getAllCourses(): Course[] {\r\n    return this.courses;\r\n  }\r\n\r\n  // Lấy course theo code\r\n  static getCourseByCode(courseCode: string): Course | undefined {\r\n    return this.courses.find(course => course.courseCode === courseCode);\r\n  }\r\n\r\n  // Lấy courses theo type\r\n  static getCoursesByType(courseType: 'L' | 'P' | 'T'): Course[] {\r\n    return this.courses.filter(course => course.courseType === courseType);\r\n  }\r\n\r\n  // Thêm course mới\r\n  static addCourse(course: Course): Course {\r\n    this.courses.push(course);\r\n    return course;\r\n  }\r\n\r\n  // Cập nhật course\r\n  static updateCourse(courseCode: string, updates: Partial<Course>): Course | null {\r\n    const index = this.courses.findIndex(course => course.courseCode === courseCode);\r\n    if (index !== -1) {\r\n      this.courses[index] = { ...this.courses[index], ...updates };\r\n      return this.courses[index];\r\n    }\r\n    return null;\r\n  }\r\n\r\n  // Xóa course\r\n  static deleteCourse(courseCode: string): boolean {\r\n    const index = this.courses.findIndex(course => course.courseCode === courseCode);\r\n    if (index !== -1) {\r\n      this.courses.splice(index, 1);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  // Lấy tất cả classes\r\n  static getAllClasses(): Class[] {\r\n    return this.classes;\r\n  }\r\n\r\n  // Lấy classes theo course\r\n  static getClassesByCourse(courseCode: string): Class[] {\r\n    return this.classes.filter(cls => cls.courseCode === courseCode);\r\n  }\r\n\r\n  // Lấy classes theo semester\r\n  static getClassesBySemester(semesterCode: string, year: number): Class[] {\r\n    return this.classes.filter(cls => \r\n      cls.semesterCode === semesterCode && cls.year === year\r\n    );\r\n  }\r\n\r\n  // Thêm class mới\r\n  static addClass(cls: Class): Class {\r\n    this.classes.push(cls);\r\n    return cls;\r\n  }\r\n\r\n  // Kiểm tra xem class có còn chỗ không\r\n  static isClassAvailable(classId: string): boolean {\r\n    const cls = this.classes.find(c => c.classId === classId);\r\n    if (!cls) return false;\r\n    return cls.currentEnrollment < cls.capacity;\r\n  }\r\n\r\n  // Đăng ký học viên vào class\r\n  static enrollStudent(classId: string): boolean {\r\n    const cls = this.classes.find(c => c.classId === classId);\r\n    if (!cls || !this.isClassAvailable(classId)) return false;\r\n    \r\n    cls.currentEnrollment += 1;\r\n    return true;\r\n  }\r\n\r\n  // Hủy đăng ký học viên\r\n  static unenrollStudent(classId: string): boolean {\r\n    const cls = this.classes.find(c => c.classId === classId);\r\n    if (!cls || cls.currentEnrollment <= 0) return false;\r\n    \r\n    cls.currentEnrollment -= 1;\r\n    return true;\r\n  }\r\n\r\n  // Lấy schedule cho class\r\n  static getScheduleForClass(classId: string): Schedule | undefined {\r\n    return this.schedules.find(schedule => schedule.classId === classId);\r\n  }\r\n\r\n  // Lấy tất cả schedules\r\n  static getAllSchedules(): Schedule[] {\r\n    return this.schedules;\r\n  }\r\n\r\n  // Lấy semesters\r\n  static getAllSemesters(): Semester[] {\r\n    return this.semesters;\r\n  }\r\n\r\n  // Lấy thông tin chi tiết course với classes\r\n  static getCourseDetails(courseCode: string): { course: Course | undefined; classes: Class[] } {\r\n    const course = this.getCourseByCode(courseCode);\r\n    const classes = this.getClassesByCourse(courseCode);\r\n    return { course, classes };\r\n  }\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}