{"ast":null,"code":"// UserModel - Quản lý logic nghiệp vụ cho User\n// Sync với database schema OCMS1\nexport class UserModel {\n  // Lấy tất cả users\n  static getAllUsers() {\n    return this.users;\n  }\n\n  // Lấy user theo ID\n  static getUserById(userId) {\n    return this.users.find(user => user.userId === userId);\n  }\n\n  // Lấy user theo username\n  static getUserByUsername(username) {\n    return this.users.find(user => user.username === username);\n  }\n\n  // Lấy users theo role\n  static getUsersByRole(role) {\n    return this.users.filter(user => user.role === role);\n  }\n\n  // Thêm user mới\n  static addUser(user) {\n    const newUser = {\n      ...user,\n      userId: `USER${Date.now()}`\n    };\n    this.users.push(newUser);\n    return newUser;\n  }\n\n  // Cập nhật user\n  static updateUser(userId, updates) {\n    const index = this.users.findIndex(user => user.userId === userId);\n    if (index !== -1) {\n      this.users[index] = {\n        ...this.users[index],\n        ...updates\n      };\n      return this.users[index];\n    }\n    return null;\n  }\n\n  // Xóa user\n  static deleteUser(userId) {\n    const index = this.users.findIndex(user => user.userId === userId);\n    if (index !== -1) {\n      this.users.splice(index, 1);\n      return true;\n    }\n    return false;\n  }\n\n  // Xác thực đăng nhập\n  static authenticate(username, password) {\n    // Mock authentication - trong thực tế sẽ kiểm tra với database\n    const user = this.getUserByUsername(username);\n    if (user && password === 'password123') {\n      // Mock password\n      return user;\n    }\n    return null;\n  }\n\n  // Kiểm tra quyền truy cập\n  static hasPermission(userId, permission) {\n    const user = this.getUserById(userId);\n    if (!user) return false;\n\n    // Logic kiểm tra quyền theo role\n    switch (user.role) {\n      case 'admin':\n        return true;\n      // Admin có tất cả quyền\n      case 'lecturer':\n        return ['view_courses', 'manage_attendance', 'upload_materials', 'manage_assignments'].includes(permission);\n      case 'student':\n        return ['view_courses', 'view_attendance', 'download_materials', 'submit_assignments'].includes(permission);\n      default:\n        return false;\n    }\n  }\n\n  // Lấy thông tin student\n  static getStudent(studentId) {\n    const user = this.getUserById(studentId);\n    if (user && user.role === 'student') {\n      return {\n        studentId,\n        user\n      };\n    }\n    return undefined;\n  }\n\n  // Lấy thông tin lecturer\n  static getLecturer(lecturerId) {\n    const user = this.getUserById(lecturerId);\n    if (user && user.role === 'lecturer') {\n      return {\n        lecturerId,\n        user\n      };\n    }\n    return undefined;\n  }\n\n  // Lấy thông tin admin\n  static getAdmin(adminId) {\n    const user = this.getUserById(adminId);\n    if (user && user.role === 'admin') {\n      return {\n        adminId,\n        user\n      };\n    }\n    return undefined;\n  }\n}\nUserModel.users = [{\n  userId: 'STU001',\n  username: 'student1',\n  fullName: 'Alice Johnson',\n  role: 'student',\n  email: 'alice@student.ocms.edu',\n  createdAt: '2024-01-01T00:00:00Z'\n}, {\n  userId: 'LEC001',\n  username: 'dr.smith',\n  fullName: 'Dr. John Smith',\n  role: 'lecturer',\n  email: 'smith@ocms.edu',\n  createdAt: '2024-01-01T00:00:00Z'\n}, {\n  userId: 'ADMIN001',\n  username: 'admin',\n  fullName: 'System Administrator',\n  role: 'admin',\n  email: 'admin@ocms.edu',\n  createdAt: '2024-01-01T00:00:00Z'\n}];","map":{"version":3,"names":["UserModel","getAllUsers","users","getUserById","userId","find","user","getUserByUsername","username","getUsersByRole","role","filter","addUser","newUser","Date","now","push","updateUser","updates","index","findIndex","deleteUser","splice","authenticate","password","hasPermission","permission","includes","getStudent","studentId","undefined","getLecturer","lecturerId","getAdmin","adminId","fullName","email","createdAt"],"sources":["D:/1. UMT/01. SUBJECTS/2. INTRO TO S.E/PROJECT/OCMS/src/models/UserModel.ts"],"sourcesContent":["import { User, Student, Lecturer, Admin } from './index';\r\n\r\n// UserModel - Quản lý logic nghiệp vụ cho User\r\n// Sync với database schema OCMS1\r\nexport class UserModel {\r\n  private static users: User[] = [\r\n    {\r\n      userId: 'STU001',\r\n      username: 'student1',\r\n      fullName: 'Alice Johnson',\r\n      role: 'student',\r\n      email: 'alice@student.ocms.edu',\r\n      createdAt: '2024-01-01T00:00:00Z'\r\n    },\r\n    {\r\n      userId: 'LEC001',\r\n      username: 'dr.smith',\r\n      fullName: 'Dr. John Smith',\r\n      role: 'lecturer',\r\n      email: 'smith@ocms.edu',\r\n      createdAt: '2024-01-01T00:00:00Z'\r\n    },\r\n    {\r\n      userId: 'ADMIN001',\r\n      username: 'admin',\r\n      fullName: 'System Administrator',\r\n      role: 'admin',\r\n      email: 'admin@ocms.edu',\r\n      createdAt: '2024-01-01T00:00:00Z'\r\n    }\r\n  ];\r\n\r\n  // Lấy tất cả users\r\n  static getAllUsers(): User[] {\r\n    return this.users;\r\n  }\r\n\r\n  // Lấy user theo ID\r\n  static getUserById(userId: string): User | undefined {\r\n    return this.users.find(user => user.userId === userId);\r\n  }\r\n\r\n  // Lấy user theo username\r\n  static getUserByUsername(username: string): User | undefined {\r\n    return this.users.find(user => user.username === username);\r\n  }\r\n\r\n  // Lấy users theo role\r\n  static getUsersByRole(role: 'student' | 'lecturer' | 'admin'): User[] {\r\n    return this.users.filter(user => user.role === role);\r\n  }\r\n\r\n  // Thêm user mới\r\n  static addUser(user: Omit<User, 'userId'>): User {\r\n    const newUser: User = {\r\n      ...user,\r\n      userId: `USER${Date.now()}`\r\n    };\r\n    this.users.push(newUser);\r\n    return newUser;\r\n  }\r\n\r\n  // Cập nhật user\r\n  static updateUser(userId: string, updates: Partial<User>): User | null {\r\n    const index = this.users.findIndex(user => user.userId === userId);\r\n    if (index !== -1) {\r\n      this.users[index] = { ...this.users[index], ...updates };\r\n      return this.users[index];\r\n    }\r\n    return null;\r\n  }\r\n\r\n  // Xóa user\r\n  static deleteUser(userId: string): boolean {\r\n    const index = this.users.findIndex(user => user.userId === userId);\r\n    if (index !== -1) {\r\n      this.users.splice(index, 1);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  // Xác thực đăng nhập\r\n  static authenticate(username: string, password: string): User | null {\r\n    // Mock authentication - trong thực tế sẽ kiểm tra với database\r\n    const user = this.getUserByUsername(username);\r\n    if (user && password === 'password123') { // Mock password\r\n      return user;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  // Kiểm tra quyền truy cập\r\n  static hasPermission(userId: string, permission: string): boolean {\r\n    const user = this.getUserById(userId);\r\n    if (!user) return false;\r\n\r\n    // Logic kiểm tra quyền theo role\r\n    switch (user.role) {\r\n      case 'admin':\r\n        return true; // Admin có tất cả quyền\r\n      case 'lecturer':\r\n        return ['view_courses', 'manage_attendance', 'upload_materials', 'manage_assignments'].includes(permission);\r\n      case 'student':\r\n        return ['view_courses', 'view_attendance', 'download_materials', 'submit_assignments'].includes(permission);\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  // Lấy thông tin student\r\n  static getStudent(studentId: string): Student | undefined {\r\n    const user = this.getUserById(studentId);\r\n    if (user && user.role === 'student') {\r\n      return { studentId, user };\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  // Lấy thông tin lecturer\r\n  static getLecturer(lecturerId: string): Lecturer | undefined {\r\n    const user = this.getUserById(lecturerId);\r\n    if (user && user.role === 'lecturer') {\r\n      return { lecturerId, user };\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  // Lấy thông tin admin\r\n  static getAdmin(adminId: string): Admin | undefined {\r\n    const user = this.getUserById(adminId);\r\n    if (user && user.role === 'admin') {\r\n      return { adminId, user };\r\n    }\r\n    return undefined;\r\n  }\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}