{"ast":null,"code":"import { UserModel } from '../models/UserModel';\n\n// AuthController - Xử lý logic điều khiển authentication\n// Sync với database schema OCMS1\nexport class AuthController {\n  // Đăng nhập\n  static async login(username, password) {\n    try {\n      // Validate input\n      if (!username || !password) {\n        return {\n          success: false,\n          error: 'Username and password are required'\n        };\n      }\n\n      // Authenticate user\n      const user = UserModel.authenticate(username, password);\n      if (!user) {\n        return {\n          success: false,\n          error: 'Invalid username or password'\n        };\n      }\n\n      // Set current user\n      this.currentUser = user;\n\n      // Store in localStorage (in real app, use secure token)\n      localStorage.setItem('currentUser', JSON.stringify(user));\n      return {\n        success: true,\n        user\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: 'Login failed. Please try again.'\n      };\n    }\n  }\n\n  // Đăng xuất\n  static logout() {\n    try {\n      this.currentUser = null;\n      localStorage.removeItem('currentUser');\n      return {\n        success: true\n      };\n    } catch (error) {\n      return {\n        success: false\n      };\n    }\n  }\n\n  // Kiểm tra trạng thái đăng nhập\n  static isLoggedIn() {\n    return this.currentUser !== null;\n  }\n\n  // Lấy thông tin user hiện tại\n  static getCurrentUser() {\n    if (!this.currentUser) {\n      // Try to restore from localStorage\n      const storedUser = localStorage.getItem('currentUser');\n      if (storedUser) {\n        this.currentUser = JSON.parse(storedUser);\n      }\n    }\n    return this.currentUser;\n  }\n\n  // Kiểm tra quyền truy cập\n  static hasPermission(permission) {\n    const user = this.getCurrentUser();\n    if (!user) return false;\n    return UserModel.hasPermission(user.userId, permission);\n  }\n\n  // Kiểm tra role\n  static hasRole(role) {\n    const user = this.getCurrentUser();\n    return (user === null || user === void 0 ? void 0 : user.role) === role;\n  }\n\n  // Lấy role hiện tại\n  static getCurrentRole() {\n    const user = this.getCurrentUser();\n    return (user === null || user === void 0 ? void 0 : user.role) || null;\n  }\n\n  // Cập nhật thông tin user\n  static updateUserProfile(updates) {\n    try {\n      const currentUser = this.getCurrentUser();\n      if (!currentUser) {\n        return {\n          success: false,\n          error: 'User not logged in'\n        };\n      }\n      const updatedUser = UserModel.updateUser(currentUser.userId, updates);\n      if (!updatedUser) {\n        return {\n          success: false,\n          error: 'Failed to update user'\n        };\n      }\n\n      // Update current user\n      this.currentUser = updatedUser;\n      localStorage.setItem('currentUser', JSON.stringify(updatedUser));\n      return {\n        success: true,\n        user: updatedUser\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: 'Update failed. Please try again.'\n      };\n    }\n  }\n\n  // Đổi mật khẩu (mock)\n  static changePassword(currentPassword, newPassword) {\n    try {\n      const user = this.getCurrentUser();\n      if (!user) {\n        return {\n          success: false,\n          error: 'User not logged in'\n        };\n      }\n\n      // Mock password validation\n      if (currentPassword !== 'password123') {\n        return {\n          success: false,\n          error: 'Current password is incorrect'\n        };\n      }\n\n      // In real app, update password in database\n      return {\n        success: true\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: 'Password change failed. Please try again.'\n      };\n    }\n  }\n\n  // Khởi tạo authentication state\n  static initializeAuth() {\n    const storedUser = localStorage.getItem('currentUser');\n    if (storedUser) {\n      try {\n        this.currentUser = JSON.parse(storedUser);\n      } catch (error) {\n        localStorage.removeItem('currentUser');\n      }\n    }\n  }\n}\nAuthController.currentUser = null;","map":{"version":3,"names":["UserModel","AuthController","login","username","password","success","error","user","authenticate","currentUser","localStorage","setItem","JSON","stringify","logout","removeItem","isLoggedIn","getCurrentUser","storedUser","getItem","parse","hasPermission","permission","userId","hasRole","role","getCurrentRole","updateUserProfile","updates","updatedUser","updateUser","changePassword","currentPassword","newPassword","initializeAuth"],"sources":["D:/1. UMT/01. SUBJECTS/2. INTRO TO S.E/PROJECT/OCMS-FRONTEND-UI/src/controllers/AuthController.ts"],"sourcesContent":["import { User } from '../models';\r\nimport { UserModel } from '../models/UserModel';\r\n\r\n// AuthController - Xử lý logic điều khiển authentication\r\n// Sync với database schema OCMS1\r\nexport class AuthController {\r\n  private static currentUser: User | null = null;\r\n\r\n  // Đăng nhập\r\n  static async login(username: string, password: string): Promise<{ success: boolean; user?: User; error?: string }> {\r\n    try {\r\n      // Validate input\r\n      if (!username || !password) {\r\n        return { success: false, error: 'Username and password are required' };\r\n      }\r\n\r\n      // Authenticate user\r\n      const user = UserModel.authenticate(username, password);\r\n      if (!user) {\r\n        return { success: false, error: 'Invalid username or password' };\r\n      }\r\n\r\n      // Set current user\r\n      this.currentUser = user;\r\n\r\n      // Store in localStorage (in real app, use secure token)\r\n      localStorage.setItem('currentUser', JSON.stringify(user));\r\n\r\n      return { success: true, user };\r\n    } catch (error) {\r\n      return { success: false, error: 'Login failed. Please try again.' };\r\n    }\r\n  }\r\n\r\n  // Đăng xuất\r\n  static logout(): { success: boolean } {\r\n    try {\r\n      this.currentUser = null;\r\n      localStorage.removeItem('currentUser');\r\n      return { success: true };\r\n    } catch (error) {\r\n      return { success: false };\r\n    }\r\n  }\r\n\r\n  // Kiểm tra trạng thái đăng nhập\r\n  static isLoggedIn(): boolean {\r\n    return this.currentUser !== null;\r\n  }\r\n\r\n  // Lấy thông tin user hiện tại\r\n  static getCurrentUser(): User | null {\r\n    if (!this.currentUser) {\r\n      // Try to restore from localStorage\r\n      const storedUser = localStorage.getItem('currentUser');\r\n      if (storedUser) {\r\n        this.currentUser = JSON.parse(storedUser);\r\n      }\r\n    }\r\n    return this.currentUser;\r\n  }\r\n\r\n  // Kiểm tra quyền truy cập\r\n  static hasPermission(permission: string): boolean {\r\n    const user = this.getCurrentUser();\r\n    if (!user) return false;\r\n    return UserModel.hasPermission(user.userId, permission);\r\n  }\r\n\r\n  // Kiểm tra role\r\n  static hasRole(role: 'student' | 'lecturer' | 'admin'): boolean {\r\n    const user = this.getCurrentUser();\r\n    return user?.role === role;\r\n  }\r\n\r\n  // Lấy role hiện tại\r\n  static getCurrentRole(): 'student' | 'lecturer' | 'admin' | null {\r\n    const user = this.getCurrentUser();\r\n    return user?.role || null;\r\n  }\r\n\r\n  // Cập nhật thông tin user\r\n  static updateUserProfile(updates: Partial<User>): { success: boolean; user?: User; error?: string } {\r\n    try {\r\n      const currentUser = this.getCurrentUser();\r\n      if (!currentUser) {\r\n        return { success: false, error: 'User not logged in' };\r\n      }\r\n\r\n      const updatedUser = UserModel.updateUser(currentUser.userId, updates);\r\n      if (!updatedUser) {\r\n        return { success: false, error: 'Failed to update user' };\r\n      }\r\n\r\n      // Update current user\r\n      this.currentUser = updatedUser;\r\n      localStorage.setItem('currentUser', JSON.stringify(updatedUser));\r\n\r\n      return { success: true, user: updatedUser };\r\n    } catch (error) {\r\n      return { success: false, error: 'Update failed. Please try again.' };\r\n    }\r\n  }\r\n\r\n  // Đổi mật khẩu (mock)\r\n  static changePassword(currentPassword: string, newPassword: string): { success: boolean; error?: string } {\r\n    try {\r\n      const user = this.getCurrentUser();\r\n      if (!user) {\r\n        return { success: false, error: 'User not logged in' };\r\n      }\r\n\r\n      // Mock password validation\r\n      if (currentPassword !== 'password123') {\r\n        return { success: false, error: 'Current password is incorrect' };\r\n      }\r\n\r\n      // In real app, update password in database\r\n      return { success: true };\r\n    } catch (error) {\r\n      return { success: false, error: 'Password change failed. Please try again.' };\r\n    }\r\n  }\r\n\r\n  // Khởi tạo authentication state\r\n  static initializeAuth(): void {\r\n    const storedUser = localStorage.getItem('currentUser');\r\n    if (storedUser) {\r\n      try {\r\n        this.currentUser = JSON.parse(storedUser);\r\n      } catch (error) {\r\n        localStorage.removeItem('currentUser');\r\n      }\r\n    }\r\n  }\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}